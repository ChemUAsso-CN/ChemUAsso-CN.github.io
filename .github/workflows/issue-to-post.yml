name: Convert Issue to Post

on:
  issues:
    # 只监听标签变化
    types: [labeled]

# 添加工作流级别的权限
permissions:
  contents: write
  issues: write
  actions: write # 添加这个权限

jobs:
  convert:
    name: Convert Issue to Post
    # 只在添加 article 标签时运行
    if: github.event.label.name == 'article'
    runs-on: ubuntu-latest
    steps:
      - name: Check duplicate run
        id: check_duplicate
        uses: actions/github-script@v6
        with:
          script: |
            const issue = context.payload.issue;

            // 检查是否已经有成功的评论
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue.number
            });

            // 检查最近的评论是否是错误信息
            const recentComments = comments.data.slice(-2);
            const hasErrorComment = recentComments.some(comment => 
              comment.body.includes('❌ 文章格式不正确')
            );

            const hasSuccessComment = recentComments.some(comment => 
              comment.body.includes('✅ 文章已成功转换并提交！')
            );

            if (hasErrorComment && !hasSuccessComment) {
              console.log('检测到错误评论，继续处理');
              return 'continue';
            }

            if (hasSuccessComment) {
              console.log('已经有成功转换的评论，跳过本次运行');
              return 'skip';
            }

            console.log('首次运行，继续处理');
            return 'continue';

      - name: Checkout repository
        if: steps.check_duplicate.outputs.result != 'skip'
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          submodules: true
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.x"

      - name: Extract article content
        if: steps.check_duplicate.outputs.result != 'skip'
        id: extract
        uses: actions/github-script@v6
        with:
          script: |
            // 验证日期格式
            function isValidDate(dateStr) {
              // 检查格式是否为 YYYY-MM-DD
              const regex = /^\d{4}-\d{2}-\d{2}$/;
              if (!regex.test(dateStr)) return false;
              
              // 检查日期是否有效
              const date = new Date(dateStr);
              return date instanceof Date && !isNaN(date);
            }

            try {
              const issue = context.payload.issue;
              const body = issue.body;

              // 提取 Front Matter 和正文
              const matches = body.match(/---\s*([\s\S]*?)\s*---\s*([\s\S]*)/);
              if (!matches) {
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  body: '❌ 文章格式不正确，请使用正确的模板格式。'
                });
                
                // 使用 not planned 关闭 issue
                await github.rest.issues.update({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  state: 'closed',
                  state_reason: 'not_planned'  // 使用 not_planned 原因
                });
                return;
              }

              let frontMatter = matches[1].trim();
              const content = matches[2].trim();

              // 解析 Front Matter
              const meta = {};
              frontMatter.split('\n').forEach(line => {
                const [key, ...values] = line.split(':').map(s => s.trim());
                if (key && values.length > 0) {
                  const value = values.join(':').trim();
                  if (key === 'categories' || key === 'tags') {
                    // 保持数组格式
                    meta[key] = value;
                  } else {
                    // 移除其他字段的引号
                    meta[key] = value.replace(/^["']|["']$/g, '');
                  }
                }
              });

              // 解析 categories 来确定类型
              let categories = [];
              try {
                // 尝试解析 categories 字符串为数组
                const categoriesStr = meta.categories || '[]';
                categories = JSON.parse(categoriesStr.replace(/'/g, '"'));
              } catch (e) {
                console.error('解析 categories 失败:', e);
                categories = [];
              }

              // 处理标签，恢复 auth: 标签的空格
              let tags = [];
              try {
                const tagsStr = meta.tags || '[]';
                tags = JSON.parse(tagsStr.replace(/'/g, '"'))
                  .map(tag => {
                    // 只处理 auth: 标签
                    if (tag.startsWith('auth:')) {
                      return tag.replace('auth:', 'auth: ');
                    }
                    return tag;
                  });
                meta.tags = JSON.stringify(tags);
              } catch (e) {
                console.error('解析 tags 失败:', e);
                tags = [];
              }

              // 验证日期
              if (!isValidDate(meta.date)) {
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  body: '❌ 日期格式不正确，请使用 YYYY-MM-DD 格式（如：2025-02-24）'
                });
                
                // 使用 not planned 关闭 issue
                await github.rest.issues.update({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  state: 'closed',
                  state_reason: 'not_planned'
                });
                return;
              }

              // 生成文件名
              const date = new Date();
              const dateStr = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}-${String(date.getDate()).padStart(2, '0')}`;
              const number = issue.number;
              
              // 根据 categories 确定文章类型
              const type = categories.includes('产物制作') ? 'product' : 'announcement';
              
              // 构建完整路径
              const path = `content/posts/${type}/${dateStr}-${number}.md`;

              // 生成新的 Front Matter，保持数组格式
              const frontMatterContent = [
                '---',
                `title: "${meta.title || ''}"`,
                `date: ${dateStr}`,
                `description: "${meta.description || ''}"`,
                `categories: ${meta.categories || '[]'}`,
                `tags: ${meta.tags || '[]'}`,
                `author: "${meta.author || ''}"`,
                'draft: false',
                '---'
              ].join('\n');

              core.setOutput('fileName', path);
              core.setOutput('content', `${frontMatterContent}\n\n${content}`);

            } catch (error) {
              console.error('Error:', error);
              core.setFailed(error.message);
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.issue.number,
                body: `❌ 处理文章时出错：${error.message}`
              });
            }

      - name: Create article file
        if: steps.extract.outputs.fileName != ''
        run: |
          if [ -z "${{ steps.extract.outputs.fileName }}" ]; then
            echo "Error: fileName is empty"
            exit 1
          fi
          echo "Creating file: ${{ steps.extract.outputs.fileName }}"
          mkdir -p "$(dirname "${{ steps.extract.outputs.fileName }}")"
          echo "${{ steps.extract.outputs.content }}" > "${{ steps.extract.outputs.fileName }}"

      - name: Commit and push changes
        if: steps.extract.outputs.fileName != ''
        run: |
          echo "Committing changes..."
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add "${{ steps.extract.outputs.fileName }}"
          git commit -m "Add article from issue #${{ github.event.issue.number }}"
          git push

      # 触发 Hugo 部署工作流
      - name: Trigger Hugo deployment
        if: steps.extract.outputs.fileName != ''
        run: |
          curl -L \
            -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/${{ github.repository }}/actions/workflows/hugo.yaml/dispatches \
            -d '{"ref":"main"}'

      - name: Wait for deployment
        if: steps.extract.outputs.fileName != ''
        run: |
          echo "等待 Hugo 部署完成..."
          sleep 15  # 等待 15 秒

      - name: Comment on issue
        if: steps.extract.outputs.fileName != ''
        uses: actions/github-script@v6
        with:
          script: |
            const fileName = '${{ steps.extract.outputs.fileName }}';
            if (!fileName) {
              console.log('No fileName output, skipping comment');
              return;
            }

            const pathParts = fileName.split('/');
            const category = pathParts[2];  // 获取类别 (product 或 announcement)
            const filename = pathParts[pathParts.length - 1].replace('.md', '');

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.issue.number,
              body: '✅ 文章已成功转换并提交！\n\n' +
                    '⏳ 网站正在更新中，请等待 1-2 分钟后访问：\n' +
                    `https://chemuasso-cn.github.io/posts/${category}/${filename}/`
            });

            await github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.issue.number,
              state: 'closed',
              labels: ['published']
            });

      - name: Update submodules
        run: |
          git submodule update --init --recursive
          git submodule update --remote --merge
