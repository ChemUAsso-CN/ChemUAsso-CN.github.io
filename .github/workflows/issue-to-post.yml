name: Convert Issue to Post

on:
  issues:
    types: [labeled, opened]

# 添加工作流级别的权限
permissions:
  contents: write
  issues: write
  actions: write # 添加这个权限

jobs:
  convert:
    name: Convert Issue to Post
    if: |
      (github.event.action == 'opened' && contains(github.event.issue.labels.*.name, 'article')) || 
      (github.event.action == 'labeled' && github.event.label.name == 'article')
    runs-on: ubuntu-latest
    steps:
      - name: Check duplicate run
        id: check_duplicate
        uses: actions/github-script@v6
        with:
          script: |
            // 检查是否已经有成功的评论
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.issue.number
            });

            const hasSuccessComment = comments.data.some(comment => 
              comment.body.includes('✅ 文章已成功转换并提交！')
            );

            if (hasSuccessComment) {
              console.log('已经有成功转换的评论，跳过本次运行');
              return 'skip';
            }
            return 'continue';

      - name: Checkout repository
        if: steps.check_duplicate.outputs.result != 'skip'
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          submodules: true
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.x"

      - name: Extract article content
        if: steps.check_duplicate.outputs.result != 'skip'
        id: extract
        uses: actions/github-script@v6
        with:
          script: |
            try {
              const issue = context.payload.issue;
              const body = issue.body;

              // 提取 Front Matter 和正文
              const matches = body.match(/---\n([\s\S]*?)\n---\n\n([\s\S]*)/);
              if (!matches) {
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  body: '❌ 文章格式不正确，请使用正确的模板格式。'
                });
                core.setOutput('result', 'invalid_format');
                return;
              }

              const frontMatter = matches[1];
              const content = matches[2];

              // 解析 Front Matter
              const meta = {};
              frontMatter.split('\n').forEach(line => {
                // 忽略注释行
                if (line.includes('#')) {
                  line = line.split('#')[0];
                }
                // 替换中文标点为英文标点
                line = line.replace(/：/g, ':')
                         .replace(/，/g, ',')
                         .replace(/（/g, '(')
                         .replace(/）/g, ')');
                
                const [key, ...value] = line.split(':').map(s => s.trim());
                if (key && value.length > 0) {
                  meta[key] = value.join(':').trim();
                }
              });

              // 分类映射
              const categoryMap = {
                '公告': 'announcement',
                '产物制作': 'product',
                '理论知识': 'theory',
                '协会讨论': 'discussion',
                '其他': 'uncategorized',
                'announcement': 'announcement',
                'product': 'product',
                'theory': 'theory',
                'experiment': 'experiment',
                'discussion': 'discussion',
                'uncategorized': 'uncategorized'
              };

              // 生成文件名
              const date = new Date();
              const dateStr = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}-${String(date.getDate()).padStart(2, '0')}`;
              const number = issue.number;
              
              // 确定文章类型
              const type = issue.labels.find(l => l.name === 'product') ? 'product' : 'announcement';
              
              // 构建完整路径
              const path = `content/posts/${type}/${dateStr}-${number}.md`;  // 添加.md后缀
              
              // 调试输出
              console.log('Generated post path:', path);

              // 清理和格式化元数据
              const cleanText = (text) => {
                if (!text) return '';
                // 保留内部空格，只处理特殊字符
                return text
                  .replace(/"/g, '\\"')        // 转义引号
                  .replace(/\(/g, '\\(')       // 转义左括号
                  .replace(/\)/g, '\\)')       // 转义右括号
                  .replace(/:/g, '\\:')        // 转义冒号
                  .replace(/^\s+|\s+$/g, '');  // 只清理首尾空格
              };

              const cleanTitle = cleanText(meta.title || '');
              const cleanDesc = cleanText(meta.description || '');
              const cleanTags = meta.tags || '[]';
              const cleanAuthor = cleanText(meta.author || '');

              // 格式化分类和标签
              const formatArray = (str) => {
                if (!str) return '[]';
                return str
                  .replace(/[\[\]]/g, '')  // 移除现有的方括号
                  .split(',')              // 分割成数组
                  .map(item => `"${item.trim()}"`)  // 给每项添加引号并去除空格
                  .join(', ');             // 用逗号和空格连接
              };

              // 生成 Front Matter
              const frontMatterContent = [
                '---',
                `title: "${cleanTitle}"`,      // 标题会保留内部空格
                `date: ${dateStr}`,
                `description: "${cleanDesc}"`,
                `categories: [${formatArray(meta.categories)}]`,
                `tags: [${formatArray(meta.tags)}]`,
                `author: "${cleanAuthor}"`,
                'draft: false',
                '---'
              ].join('\n');

              // 设置输出
              core.setOutput('fileName', path);
              core.setOutput('content', `${frontMatterContent}\n\n${content}`);

            } catch (error) {
              console.error('Error:', error);
              core.setFailed(error.message);
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.issue.number,
                body: `❌ 处理文章时出错：${error.message}`
              });
            }

      - name: Create article file
        if: steps.extract.outputs.fileName != ''
        run: |
          if [ -z "${{ steps.extract.outputs.fileName }}" ]; then
            echo "Error: fileName is empty"
            exit 1
          fi
          echo "Creating file: ${{ steps.extract.outputs.fileName }}"
          mkdir -p "$(dirname "${{ steps.extract.outputs.fileName }}")"
          echo "${{ steps.extract.outputs.content }}" > "${{ steps.extract.outputs.fileName }}"

      - name: Commit and push changes
        if: steps.extract.outputs.fileName != ''
        run: |
          echo "Committing changes..."
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add "${{ steps.extract.outputs.fileName }}"  # 使用实际的文件路径
          git commit -m "Add article from issue #${{ github.event.issue.number }}"
          git push

      # 触发 Hugo 部署工作流
      - name: Trigger Hugo deployment
        run: |
          curl -L \
            -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/${{ github.repository }}/actions/workflows/hugo.yaml/dispatches \
            -d '{"ref":"main"}'

      - name: Wait for deployment
        run: |
          echo "等待 Hugo 部署完成..."
          sleep 15  # 等待 15 秒

      - name: Comment on issue
        uses: actions/github-script@v6
        with:
          script: |
            const fileName = '${{ steps.extract.outputs.fileName }}';
            if (!fileName) {
              console.log('No fileName output, skipping comment');
              return;
            }

            const pathParts = fileName.split('/');
            const category = pathParts[2];  // 获取类别 (product 或 announcement)
            const filename = pathParts[pathParts.length - 1].replace('.md', '');

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.issue.number,
              body: '✅ 文章已成功转换并提交！\n\n' +
                    '⏳ 网站正在更新中，请等待 1-2 分钟后访问：\n' +
                    `https://chemuasso-cn.github.io/posts/${category}/${filename}/`
            });

            await github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.issue.number,
              state: 'closed',
              labels: ['published']
            });

      - name: Update submodules
        run: |
          git submodule update --init --recursive
          git submodule update --remote --merge
