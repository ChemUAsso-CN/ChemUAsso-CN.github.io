name: Convert Issue to Post

on:
  issues:
    types: [labeled]

jobs:
  convert:
    if: github.event.label.name == 'article'
    runs-on: ubuntu-latest
    steps:
      - name: Check if should process
        id: check
        uses: actions/github-script@v6
        with:
          script: |
            const issue = context.payload.issue;
            
            // 检查是否已经有成功的评论
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue.number
            });
            
            // 检查最近的评论是否是错误信息
            const recentComments = comments.data.slice(-2);
            const hasErrorComment = recentComments.some(comment => 
              comment.body.includes('❌')
            );
            
            const hasSuccessComment = recentComments.some(comment => 
              comment.body.includes('✅ 文章已成功转换并提交！')
            );
            
            if (hasErrorComment && !hasSuccessComment) {
              console.log('检测到错误评论，继续处理');
              return 'continue';
            }
            
            if (hasSuccessComment) {
              console.log('已经有成功转换的评论，跳过本次运行');
              return 'skip';
            }
            
            console.log('首次运行，继续处理');
            return 'continue';

      - name: Checkout
        if: steps.check.outputs.result == 'continue'
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: true

      - name: Process Issue
        if: steps.check.outputs.result == 'continue'
        id: process
        uses: actions/github-script@v6
        with:
          script: |
            function isValidDate(dateStr) {
              // 检查格式是否为 YYYY-MM-DD，允许后面有注释
              const regex = /^\d{4}-\d{2}-\d{2}(?:\s*#.*)?$/;
              if (!regex.test(dateStr)) return false;
              
              // 提取日期部分（去掉注释）
              const pureDateStr = dateStr.split('#')[0].trim();
              
              // 检查日期是否有效
              const date = new Date(pureDateStr);
              return date instanceof Date && !isNaN(date);
            }

            try {
              const issue = context.payload.issue;
              const body = issue.body;

              // 提取 Front Matter 和正文
              const matches = body.match(/---\s*([\s\S]*?)\s*---\s*([\s\S]*)/);
              if (!matches) {
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  body: '❌ 文章格式不正确，请使用正确的模板格式。'
                });
                return;
              }

              const frontMatter = matches[1].trim();
              const content = matches[2].trim();

              // 解析 Front Matter
              const meta = {};
              frontMatter.split('\n').forEach(line => {
                const [key, ...values] = line.split(':').map(s => s.trim());
                if (key && values.length > 0) {
                  meta[key] = values.join(':').trim().replace(/^["']|["']$/g, '');
                }
              });

              // 验证日期
              console.log('Validating date:', meta.date);
              if (!isValidDate(meta.date)) {
                console.log('Date validation failed');
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  body: '❌ 日期格式不正确，请使用 YYYY-MM-DD 格式（如：2025-02-24）'
                });
                return;
              }

              // 解析分类
              let categories = [];
              try {
                categories = JSON.parse(meta.categories.replace(/'/g, '"'));
              } catch (e) {
                console.error('解析 categories 失败:', e);
                categories = [];
              }

              // 解析标签
              let tags = [];
              try {
                tags = JSON.parse(meta.tags.replace(/'/g, '"'));
              } catch (e) {
                console.error('解析 tags 失败:', e);
                tags = [];
              }

              // 确定文章类型和路径
              const type = categories.includes('产物制作') ? 'product' : 'announcement';
              const path = `content/posts/${type}/${meta.date}-${issue.number}.md`;

              // 生成新的 Front Matter
              const newFrontMatter = [
                '---',
                `title: "${meta.title || ''}"`,
                `date: ${meta.date}`,
                `description: "${meta.description || ''}"`,
                `categories: ${meta.categories || '[]'}`,
                `tags: ${meta.tags || '[]'}`,
                `author: "${meta.author || ''}"`,
                'draft: false',
                '---'
              ].join('\n');

              core.setOutput('fileName', path);
              core.setOutput('content', `${newFrontMatter}\n\n${content}`);

            } catch (error) {
              console.error('Error:', error);
              core.setFailed(error.message);
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                body: `❌ 处理文章时出错：${error.message}`
              });
            }

      - name: Create Pull Request
        if: steps.check.outputs.result == 'continue' && steps.process.outputs.fileName
        run: |
          # 创建新分支
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git checkout -b article/${{ github.event.issue.number }}
          
          # 写入文件
          mkdir -p $(dirname ${{ steps.process.outputs.fileName }})
          echo "${{ steps.process.outputs.content }}" > ${{ steps.process.outputs.fileName }}
          
          # 提交更改
          git add .
          git commit -m "feat: add article from issue #${{ github.event.issue.number }}"
          git push origin article/${{ github.event.issue.number }}
          
          # 创建 PR
          gh pr create \
            --title "feat: add article from issue #${{ github.event.issue.number }}" \
            --body "Converted from issue #${{ github.event.issue.number }}" \
            --base main \
            --head article/${{ github.event.issue.number }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Comment on Issue
        if: steps.check.outputs.result == 'continue' && steps.process.outputs.fileName
        uses: actions/github-script@v6
        with:
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.issue.number,
              body: '✅ 文章已成功转换并提交！'
            }); 