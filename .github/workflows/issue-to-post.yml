name: Convert Issue to Post

on:
  issues:
    types: [labeled, opened]

# 添加工作流级别的权限
permissions:
  contents: write
  issues: write
  actions: write # 添加这个权限

jobs:
  convert:
    name: Convert Issue to Post
    if: |
      github.event_name == 'issues' && 
      (github.event.action == 'labeled' && github.event.label.name == 'article' || 
       github.event.action == 'opened')
    runs-on: ubuntu-latest
    steps:
      - name: Debug event
        run: |
          echo "Event name: ${{ github.event_name }}"
          echo "Action: ${{ github.event.action }}"
          echo "Label: ${{ github.event.label.name }}"

      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.x"

      - name: Extract article content
        id: extract
        uses: actions/github-script@v6
        with:
          script: |
            const issue = context.payload.issue;
            const body = issue.body;

            // 提取 Front Matter 和正文
            const matches = body.match(/---\n([\s\S]*?)\n---\n\n([\s\S]*)/);
            if (!matches) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                body: '❌ 文章格式不正确，请使用正确的模板格式。'
              });
              return;
            }

            const frontMatter = matches[1];
            const content = matches[2];

            // 解析 Front Matter
            const meta = {};
            frontMatter.split('\n').forEach(line => {
              // 忽略注释行
              if (line.includes('#')) {
                line = line.split('#')[0];
              }
              // 替换中文标点为英文标点
              line = line.replace(/：/g, ':')
                       .replace(/，/g, ',')
                       .replace(/（/g, '(')
                       .replace(/）/g, ')');
              
              const [key, ...value] = line.split(':').map(s => s.trim());
              if (key && value.length > 0) {
                meta[key] = value.join(':').trim();
              }
            });

            // 分类映射
            const categoryMap = {
              '公告': 'announcement',
              '产物制作': 'product',
              '理论知识': 'theory',
              '协会讨论': 'discussion',
              '其他': 'uncategorized',
              'announcement': 'announcement',
              'product': 'product',
              'theory': 'theory',
              'experiment': 'experiment',
              'discussion': 'discussion',
              'uncategorized': 'uncategorized'
            };

            // 生成文件名
            const date = new Date().toISOString().split('T')[0];
            const rawCategory = (meta.categories || '')
              .replace(/[\[\]"]/g, '')
              .split(',')[0]
              .trim();
            const category = categoryMap[rawCategory] || 'uncategorized';

            // 确保 fileName 不为空
            if (!category || !date || !issue.number) {
              throw new Error('Missing required fields for file name');
            }

            const fileName = `content/posts/${category}/${date}-${issue.number}.md`;

            // 验证 fileName
            console.log('Generated fileName:', fileName);

            // 清理和格式化元数据
            const cleanText = (text) => {
              if (!text) return '';
              return text
                .replace(/"/g, '\\"')     // 转义引号
                .replace(/\(/g, '\\(')    // 转义左括号
                .replace(/\)/g, '\\)')    // 转义右括号
                .replace(/:/g, '\\:');    // 转义冒号
            };

            const cleanTitle = cleanText(meta.title || '');
            const cleanDesc = cleanText(meta.description || '');
            const cleanTags = meta.tags || '[]';
            const cleanAuthor = cleanText(meta.author || '');

            // 格式化分类和标签
            const formatArray = (str) => {
              if (!str) return '[]';
              return str
                .replace(/[\[\]]/g, '')  // 移除现有的方括号
                .split(',')              // 分割成数组
                .map(item => `"${item.trim()}"`)  // 给每项添加引号并去除空格
                .join(', ');             // 用逗号和空格连接
            };

            // 生成 Front Matter
            const frontMatterContent = [
              '---',
              `title: "${cleanTitle}"`,
              `date: ${date}`,
              `description: "${cleanDesc}"`,
              `categories: [${formatArray(meta.categories)}]`,  // 格式化分类
              `tags: [${formatArray(meta.tags)}]`,             // 格式化标签
              `author: "${cleanAuthor}"`,
              'draft: false',
              '---'
            ].join('\n');

            // 输出结果供后续步骤使用
            core.setOutput('fileName', fileName);
            core.setOutput('content', `${frontMatterContent}\n\n${content}`);

      - name: Create article file
        run: |
          echo "Creating file: ${{ steps.extract.outputs.fileName }}"
          mkdir -p "$(dirname "${{ steps.extract.outputs.fileName }}")"
          echo "${{ steps.extract.outputs.content }}" > "${{ steps.extract.outputs.fileName }}"

      - name: Commit and push changes
        run: |
          echo "Committing changes..."
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add "${{ steps.extract.outputs.fileName }}"
          git commit -m "Add article from issue #${{ github.event.issue.number }}"
          git push

      # 触发 Hugo 部署工作流
      - name: Trigger Hugo deployment
        run: |
          curl -L \
            -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/${{ github.repository }}/actions/workflows/hugo.yaml/dispatches \
            -d '{"ref":"main"}'

      - name: Wait for deployment
        run: |
          echo "等待 Hugo 部署完成..."
          sleep 15  # 等待 15 秒

      - name: Comment on issue
        uses: actions/github-script@v6
        with:
          script: |
            const category = '${{ steps.extract.outputs.fileName }}'.split('/')[2];
            const filename = '${{ steps.extract.outputs.fileName }}'.split('/').pop().replace('.md', '');

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.issue.number,
              body: '✅ 文章已成功转换并提交！\n\n' +
                    '⏳ 网站正在更新中，请等待 1-2 分钟后访问：\n' +
                    `https://chemuasso-cn.github.io/posts/${category}/${filename}/`
            });

            await github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.issue.number,
              state: 'closed',
              labels: ['published']
            });
