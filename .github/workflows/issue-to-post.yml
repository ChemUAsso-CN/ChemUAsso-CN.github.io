name: Convert Issue to Post

on:
  issues:
    types: [labeled, opened]

# 添加工作流级别的权限
permissions:
  contents: write
  issues: write
  actions: write # 添加这个权限

jobs:
  convert:
    name: Convert Issue to Post
    if: |
      (github.event.action == 'opened' && contains(github.event.issue.labels.*.name, 'article')) || 
      (github.event.action == 'labeled' && github.event.label.name == 'article')
    runs-on: ubuntu-latest
    steps:
      - name: Check duplicate run
        id: check_duplicate
        uses: actions/github-script@v6
        with:
          script: |
            const issue = context.payload.issue;

            // 检查是否已经有成功的评论
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue.number
            });

            // 检查最近的评论是否是错误信息
            const recentComments = comments.data.slice(-2);
            const hasErrorComment = recentComments.some(comment => 
              comment.body.includes('❌ 文章格式不正确')
            );

            const hasSuccessComment = recentComments.some(comment => 
              comment.body.includes('✅ 文章已成功转换并提交！')
            );

            if (hasErrorComment && !hasSuccessComment) {
              console.log('检测到错误评论，继续处理');
              return 'continue';
            }

            if (hasSuccessComment) {
              console.log('已经有成功转换的评论，跳过本次运行');
              return 'skip';
            }

            console.log('首次运行，继续处理');
            return 'continue';

      - name: Checkout repository
        if: steps.check_duplicate.outputs.result != 'skip'
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          submodules: true
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.x"

      - name: Extract article content
        if: steps.check_duplicate.outputs.result != 'skip'
        id: extract
        uses: actions/github-script@v6
        with:
          script: |
            try {
              const issue = context.payload.issue;
              const body = issue.body;

              // 提取 Front Matter 和正文
              const matches = body.match(/---\s*([\s\S]*?)\s*---\s*([\s\S]*)/);
              if (!matches) {
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  body: '❌ 文章格式不正确，请使用正确的模板格式。'
                });
                return;
              }

              let frontMatter = matches[1].trim();
              const content = matches[2].trim();

              // 解析 Front Matter
              const meta = {};
              frontMatter.split('\n').forEach(line => {
                const [key, ...values] = line.split(':').map(s => s.trim());
                if (key && values.length > 0) {
                  const value = values.join(':').trim();
                  // 移除引号
                  meta[key] = value.replace(/^["']|["']$/g, '');
                }
              });

              // 生成文件名
              const date = new Date();
              const dateStr = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}-${String(date.getDate()).padStart(2, '0')}`;
              const number = issue.number;
              
              // 确定文章类型
              const type = issue.labels.find(l => l.name === 'product') ? 'product' : 'announcement';
              
              // 构建完整路径
              const path = `content/posts/${type}/${dateStr}-${number}.md`;

              // 生成新的 Front Matter
              const frontMatterContent = [
                '---',
                `title: "${meta.title || ''}"`,
                `date: ${dateStr}`,
                `description: "${meta.description || ''}"`,
                `categories: ${meta.categories || '[]'}`,
                `tags: ${meta.tags || '[]'}`,
                `author: "${meta.author || ''}"`,
                'draft: false',
                '---'
              ].join('\n');

              core.setOutput('fileName', path);
              core.setOutput('content', `${frontMatterContent}\n\n${content}`);

            } catch (error) {
              console.error('Error:', error);
              core.setFailed(error.message);
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.issue.number,
                body: `❌ 处理文章时出错：${error.message}`
              });
            }
